Discussions
=============

先从module-level上看。

项目大体上有层次感，main在最顶层，pickle_idea、UseSqlite等工具类在最底层。

main有一条直接指向pickle_idea的依赖，他直接从依赖图的底部绕过了中间层。
这说明中间层并没有成功地做好抽象，main依然需要直接依赖底层。
而且main也有一条依赖直接指向wordfreqCMD，这打乱了分层。

同时，可以看到存在pickle_idea和pickle_idea2两个名字相似的文件，
而且他们同时被main依赖。文件的名字说明他们具有相似的功能，
但是他被交叉着使用。至少，这不是一个好的命名方法。

另外一个比较奇怪的地方是WordFreq和difficulty同时依赖了wordfreqCMD，
但幸运的是，difficulty只是在作为启动文件运行的代码里存在这种依赖，
也就是说，在实际运行中是不存在依赖的。

第一张依赖图里的三个问题只有最后一个被真正解决了，
所以，接下去将通过剩下的依赖图和代码来继续分析。

两个pickle_idea文件中的函数名称完全相同，只是部分函数的实现有区别，
区别是因为函数对应的输入和输出的参数数据类型有区别。
因为两个pickle_idea文件提供的是一些功能近似的底层工具，
所以将其合并可以简化和明确依赖关系，同时可以减少重复的代码。

main对于wordfreqCMD的跨层依赖则更多的源于WordFreq文件定位的不明确，
WordFreq包含一个具有初始化函数的类，可以认为这是一个单词和词频构成的实体类。
但实际上，这个类并不能提供main所需要的所有关于词频的函数，
甚至在main中不止需要单词的词频，还有段落、选中文字等的词频。

这样看来，反而是wordfreq打乱了分层。
如果去掉wordfreq，则在module-level上项目只有两层：main直接依赖于其他所有的模块。
这样的分层并不合理。

而且可以看到在main中有很多的sql语句和html语句，
这些内容的融入使得main过于庞大。
比如sql语句相关的函数，他更适合存在于main和UseSqlite两个模块之间的模块里。

所以，综合上述分析，EnglishPal在架构上的优点有：
1. 底层的函数完善
2. 在function-level上有分层

缺点有：
1. module-level上基本没有分层，main中包含的函数太多，没有拆分
2. 两个pickle_idea模块内容重复，并且有交叉的调用，依赖不明确
3. 整个项目的功能逻辑在main的几个函数内部定义，没有拆分出功能模块，使得函数太长，不利于理解修改和重用
4. 从整体上看，项目的class/function-level依赖图在宽度和深度的比例上不合理，高层的函数同时依赖过多的底层函数，使得依赖的两端跨度太大